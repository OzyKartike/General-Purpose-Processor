// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/25/2022 12:19:38"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    FinalCircuit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module FinalCircuit_vlg_sample_tst(
	A,
	B,
	Clock,
	data_in,
	En_Decoder,
	reset,
	Reset_A,
	Reset_B,
	sampler_tx
);
input [7:0] A;
input [7:0] B;
input  Clock;
input  data_in;
input  En_Decoder;
input  reset;
input  Reset_A;
input  Reset_B;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or Clock or data_in or En_Decoder or reset or Reset_A or Reset_B)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module FinalCircuit_vlg_check_tst (
	Current_state,
	R1,
	R2,
	R_First_Four,
	R_Last_Four,
	Sign,
	student_ID,
	sampler_rx
);
input [3:0] Current_state;
input [3:0] R1;
input [3:0] R2;
input [0:6] R_First_Four;
input [0:6] R_Last_Four;
input [0:6] Sign;
input [0:6] student_ID;
input sampler_rx;

reg [3:0] Current_state_expected;
reg [3:0] R1_expected;
reg [3:0] R2_expected;
reg [0:6] R_First_Four_expected;
reg [0:6] R_Last_Four_expected;
reg [0:6] Sign_expected;
reg [0:6] student_ID_expected;

reg [3:0] Current_state_prev;
reg [3:0] R1_prev;
reg [3:0] R2_prev;
reg [0:6] R_First_Four_prev;
reg [0:6] R_Last_Four_prev;
reg [0:6] Sign_prev;
reg [0:6] student_ID_prev;

reg [3:0] Current_state_expected_prev;
reg [3:0] R1_expected_prev;
reg [3:0] R2_expected_prev;
reg [0:6] R_First_Four_expected_prev;
reg [0:6] R_Last_Four_expected_prev;
reg [0:6] Sign_expected_prev;
reg [0:6] student_ID_expected_prev;

reg [3:0] last_Current_state_exp;
reg [3:0] last_R1_exp;
reg [3:0] last_R2_exp;
reg [0:6] last_R_First_Four_exp;
reg [0:6] last_R_Last_Four_exp;
reg [0:6] last_Sign_exp;
reg [0:6] last_student_ID_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	Current_state_prev = Current_state;
	R1_prev = R1;
	R2_prev = R2;
	R_First_Four_prev = R_First_Four;
	R_Last_Four_prev = R_Last_Four;
	Sign_prev = Sign;
	student_ID_prev = student_ID;
end

// update expected /o prevs

always @(trigger)
begin
	Current_state_expected_prev = Current_state_expected;
	R1_expected_prev = R1_expected;
	R2_expected_prev = R2_expected;
	R_First_Four_expected_prev = R_First_Four_expected;
	R_Last_Four_expected_prev = R_Last_Four_expected;
	Sign_expected_prev = Sign_expected;
	student_ID_expected_prev = student_ID_expected;
end


// expected R_First_Four[ 6 ]
initial
begin
	R_First_Four_expected[6] = 1'bX;
end 
// expected R_First_Four[ 5 ]
initial
begin
	R_First_Four_expected[5] = 1'bX;
end 
// expected R_First_Four[ 4 ]
initial
begin
	R_First_Four_expected[4] = 1'bX;
end 
// expected R_First_Four[ 3 ]
initial
begin
	R_First_Four_expected[3] = 1'bX;
end 
// expected R_First_Four[ 2 ]
initial
begin
	R_First_Four_expected[2] = 1'bX;
end 
// expected R_First_Four[ 1 ]
initial
begin
	R_First_Four_expected[1] = 1'bX;
end 
// expected R_First_Four[ 0 ]
initial
begin
	R_First_Four_expected[0] = 1'bX;
end 
// expected R_Last_Four[ 6 ]
initial
begin
	R_Last_Four_expected[6] = 1'bX;
end 
// expected R_Last_Four[ 5 ]
initial
begin
	R_Last_Four_expected[5] = 1'bX;
end 
// expected R_Last_Four[ 4 ]
initial
begin
	R_Last_Four_expected[4] = 1'bX;
end 
// expected R_Last_Four[ 3 ]
initial
begin
	R_Last_Four_expected[3] = 1'bX;
end 
// expected R_Last_Four[ 2 ]
initial
begin
	R_Last_Four_expected[2] = 1'bX;
end 
// expected R_Last_Four[ 1 ]
initial
begin
	R_Last_Four_expected[1] = 1'bX;
end 
// expected R_Last_Four[ 0 ]
initial
begin
	R_Last_Four_expected[0] = 1'bX;
end 
// expected Sign[ 6 ]
initial
begin
	Sign_expected[6] = 1'bX;
end 
// expected Sign[ 5 ]
initial
begin
	Sign_expected[5] = 1'bX;
end 
// expected Sign[ 4 ]
initial
begin
	Sign_expected[4] = 1'bX;
end 
// expected Sign[ 3 ]
initial
begin
	Sign_expected[3] = 1'bX;
end 
// expected Sign[ 2 ]
initial
begin
	Sign_expected[2] = 1'bX;
end 
// expected Sign[ 1 ]
initial
begin
	Sign_expected[1] = 1'bX;
end 
// expected Sign[ 0 ]
initial
begin
	Sign_expected[0] = 1'bX;
end 
// expected student_ID[ 6 ]
initial
begin
	student_ID_expected[6] = 1'bX;
end 
// expected student_ID[ 5 ]
initial
begin
	student_ID_expected[5] = 1'bX;
end 
// expected student_ID[ 4 ]
initial
begin
	student_ID_expected[4] = 1'bX;
end 
// expected student_ID[ 3 ]
initial
begin
	student_ID_expected[3] = 1'bX;
end 
// expected student_ID[ 2 ]
initial
begin
	student_ID_expected[2] = 1'bX;
end 
// expected student_ID[ 1 ]
initial
begin
	student_ID_expected[1] = 1'bX;
end 
// expected student_ID[ 0 ]
initial
begin
	student_ID_expected[0] = 1'bX;
end 
// expected Current_state[ 3 ]
initial
begin
	Current_state_expected[3] = 1'bX;
end 
// expected Current_state[ 2 ]
initial
begin
	Current_state_expected[2] = 1'bX;
end 
// expected Current_state[ 1 ]
initial
begin
	Current_state_expected[1] = 1'bX;
end 
// expected Current_state[ 0 ]
initial
begin
	Current_state_expected[0] = 1'bX;
end 
// expected R1[ 3 ]
initial
begin
	R1_expected[3] = 1'bX;
end 
// expected R1[ 2 ]
initial
begin
	R1_expected[2] = 1'bX;
end 
// expected R1[ 1 ]
initial
begin
	R1_expected[1] = 1'bX;
end 
// expected R1[ 0 ]
initial
begin
	R1_expected[0] = 1'bX;
end 
// expected R2[ 3 ]
initial
begin
	R2_expected[3] = 1'bX;
end 
// expected R2[ 2 ]
initial
begin
	R2_expected[2] = 1'bX;
end 
// expected R2[ 1 ]
initial
begin
	R2_expected[1] = 1'bX;
end 
// expected R2[ 0 ]
initial
begin
	R2_expected[0] = 1'bX;
end 
// generate trigger
always @(Current_state_expected or Current_state or R1_expected or R1 or R2_expected or R2 or R_First_Four_expected or R_First_Four or R_Last_Four_expected or R_Last_Four or Sign_expected or Sign or student_ID_expected or student_ID)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Current_state = %b | expected R1 = %b | expected R2 = %b | expected R_First_Four = %b | expected R_Last_Four = %b | expected Sign = %b | expected student_ID = %b | ",Current_state_expected_prev,R1_expected_prev,R2_expected_prev,R_First_Four_expected_prev,R_Last_Four_expected_prev,Sign_expected_prev,student_ID_expected_prev);
	$display("| real Current_state = %b | real R1 = %b | real R2 = %b | real R_First_Four = %b | real R_Last_Four = %b | real Sign = %b | real student_ID = %b | ",Current_state_prev,R1_prev,R2_prev,R_First_Four_prev,R_Last_Four_prev,Sign_prev,student_ID_prev);
`endif
	if (
		( Current_state_expected_prev[0] !== 1'bx ) && ( Current_state_prev[0] !== Current_state_expected_prev[0] )
		&& ((Current_state_expected_prev[0] !== last_Current_state_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Current_state[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Current_state_expected_prev);
		$display ("     Real value = %b", Current_state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Current_state_exp[0] = Current_state_expected_prev[0];
	end
	if (
		( Current_state_expected_prev[1] !== 1'bx ) && ( Current_state_prev[1] !== Current_state_expected_prev[1] )
		&& ((Current_state_expected_prev[1] !== last_Current_state_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Current_state[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Current_state_expected_prev);
		$display ("     Real value = %b", Current_state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Current_state_exp[1] = Current_state_expected_prev[1];
	end
	if (
		( Current_state_expected_prev[2] !== 1'bx ) && ( Current_state_prev[2] !== Current_state_expected_prev[2] )
		&& ((Current_state_expected_prev[2] !== last_Current_state_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Current_state[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Current_state_expected_prev);
		$display ("     Real value = %b", Current_state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Current_state_exp[2] = Current_state_expected_prev[2];
	end
	if (
		( Current_state_expected_prev[3] !== 1'bx ) && ( Current_state_prev[3] !== Current_state_expected_prev[3] )
		&& ((Current_state_expected_prev[3] !== last_Current_state_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Current_state[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Current_state_expected_prev);
		$display ("     Real value = %b", Current_state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Current_state_exp[3] = Current_state_expected_prev[3];
	end
	if (
		( R1_expected_prev[0] !== 1'bx ) && ( R1_prev[0] !== R1_expected_prev[0] )
		&& ((R1_expected_prev[0] !== last_R1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R1_exp[0] = R1_expected_prev[0];
	end
	if (
		( R1_expected_prev[1] !== 1'bx ) && ( R1_prev[1] !== R1_expected_prev[1] )
		&& ((R1_expected_prev[1] !== last_R1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R1_exp[1] = R1_expected_prev[1];
	end
	if (
		( R1_expected_prev[2] !== 1'bx ) && ( R1_prev[2] !== R1_expected_prev[2] )
		&& ((R1_expected_prev[2] !== last_R1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R1_exp[2] = R1_expected_prev[2];
	end
	if (
		( R1_expected_prev[3] !== 1'bx ) && ( R1_prev[3] !== R1_expected_prev[3] )
		&& ((R1_expected_prev[3] !== last_R1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R1_exp[3] = R1_expected_prev[3];
	end
	if (
		( R2_expected_prev[0] !== 1'bx ) && ( R2_prev[0] !== R2_expected_prev[0] )
		&& ((R2_expected_prev[0] !== last_R2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R2_exp[0] = R2_expected_prev[0];
	end
	if (
		( R2_expected_prev[1] !== 1'bx ) && ( R2_prev[1] !== R2_expected_prev[1] )
		&& ((R2_expected_prev[1] !== last_R2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R2_exp[1] = R2_expected_prev[1];
	end
	if (
		( R2_expected_prev[2] !== 1'bx ) && ( R2_prev[2] !== R2_expected_prev[2] )
		&& ((R2_expected_prev[2] !== last_R2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R2_exp[2] = R2_expected_prev[2];
	end
	if (
		( R2_expected_prev[3] !== 1'bx ) && ( R2_prev[3] !== R2_expected_prev[3] )
		&& ((R2_expected_prev[3] !== last_R2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R2_exp[3] = R2_expected_prev[3];
	end
	if (
		( R_First_Four_expected_prev[0] !== 1'bx ) && ( R_First_Four_prev[0] !== R_First_Four_expected_prev[0] )
		&& ((R_First_Four_expected_prev[0] !== last_R_First_Four_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_First_Four[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_First_Four_expected_prev);
		$display ("     Real value = %b", R_First_Four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R_First_Four_exp[0] = R_First_Four_expected_prev[0];
	end
	if (
		( R_First_Four_expected_prev[1] !== 1'bx ) && ( R_First_Four_prev[1] !== R_First_Four_expected_prev[1] )
		&& ((R_First_Four_expected_prev[1] !== last_R_First_Four_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_First_Four[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_First_Four_expected_prev);
		$display ("     Real value = %b", R_First_Four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R_First_Four_exp[1] = R_First_Four_expected_prev[1];
	end
	if (
		( R_First_Four_expected_prev[2] !== 1'bx ) && ( R_First_Four_prev[2] !== R_First_Four_expected_prev[2] )
		&& ((R_First_Four_expected_prev[2] !== last_R_First_Four_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_First_Four[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_First_Four_expected_prev);
		$display ("     Real value = %b", R_First_Four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R_First_Four_exp[2] = R_First_Four_expected_prev[2];
	end
	if (
		( R_First_Four_expected_prev[3] !== 1'bx ) && ( R_First_Four_prev[3] !== R_First_Four_expected_prev[3] )
		&& ((R_First_Four_expected_prev[3] !== last_R_First_Four_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_First_Four[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_First_Four_expected_prev);
		$display ("     Real value = %b", R_First_Four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R_First_Four_exp[3] = R_First_Four_expected_prev[3];
	end
	if (
		( R_First_Four_expected_prev[4] !== 1'bx ) && ( R_First_Four_prev[4] !== R_First_Four_expected_prev[4] )
		&& ((R_First_Four_expected_prev[4] !== last_R_First_Four_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_First_Four[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_First_Four_expected_prev);
		$display ("     Real value = %b", R_First_Four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R_First_Four_exp[4] = R_First_Four_expected_prev[4];
	end
	if (
		( R_First_Four_expected_prev[5] !== 1'bx ) && ( R_First_Four_prev[5] !== R_First_Four_expected_prev[5] )
		&& ((R_First_Four_expected_prev[5] !== last_R_First_Four_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_First_Four[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_First_Four_expected_prev);
		$display ("     Real value = %b", R_First_Four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R_First_Four_exp[5] = R_First_Four_expected_prev[5];
	end
	if (
		( R_First_Four_expected_prev[6] !== 1'bx ) && ( R_First_Four_prev[6] !== R_First_Four_expected_prev[6] )
		&& ((R_First_Four_expected_prev[6] !== last_R_First_Four_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_First_Four[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_First_Four_expected_prev);
		$display ("     Real value = %b", R_First_Four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R_First_Four_exp[6] = R_First_Four_expected_prev[6];
	end
	if (
		( R_Last_Four_expected_prev[0] !== 1'bx ) && ( R_Last_Four_prev[0] !== R_Last_Four_expected_prev[0] )
		&& ((R_Last_Four_expected_prev[0] !== last_R_Last_Four_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_Last_Four[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_Last_Four_expected_prev);
		$display ("     Real value = %b", R_Last_Four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R_Last_Four_exp[0] = R_Last_Four_expected_prev[0];
	end
	if (
		( R_Last_Four_expected_prev[1] !== 1'bx ) && ( R_Last_Four_prev[1] !== R_Last_Four_expected_prev[1] )
		&& ((R_Last_Four_expected_prev[1] !== last_R_Last_Four_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_Last_Four[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_Last_Four_expected_prev);
		$display ("     Real value = %b", R_Last_Four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R_Last_Four_exp[1] = R_Last_Four_expected_prev[1];
	end
	if (
		( R_Last_Four_expected_prev[2] !== 1'bx ) && ( R_Last_Four_prev[2] !== R_Last_Four_expected_prev[2] )
		&& ((R_Last_Four_expected_prev[2] !== last_R_Last_Four_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_Last_Four[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_Last_Four_expected_prev);
		$display ("     Real value = %b", R_Last_Four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R_Last_Four_exp[2] = R_Last_Four_expected_prev[2];
	end
	if (
		( R_Last_Four_expected_prev[3] !== 1'bx ) && ( R_Last_Four_prev[3] !== R_Last_Four_expected_prev[3] )
		&& ((R_Last_Four_expected_prev[3] !== last_R_Last_Four_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_Last_Four[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_Last_Four_expected_prev);
		$display ("     Real value = %b", R_Last_Four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R_Last_Four_exp[3] = R_Last_Four_expected_prev[3];
	end
	if (
		( R_Last_Four_expected_prev[4] !== 1'bx ) && ( R_Last_Four_prev[4] !== R_Last_Four_expected_prev[4] )
		&& ((R_Last_Four_expected_prev[4] !== last_R_Last_Four_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_Last_Four[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_Last_Four_expected_prev);
		$display ("     Real value = %b", R_Last_Four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R_Last_Four_exp[4] = R_Last_Four_expected_prev[4];
	end
	if (
		( R_Last_Four_expected_prev[5] !== 1'bx ) && ( R_Last_Four_prev[5] !== R_Last_Four_expected_prev[5] )
		&& ((R_Last_Four_expected_prev[5] !== last_R_Last_Four_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_Last_Four[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_Last_Four_expected_prev);
		$display ("     Real value = %b", R_Last_Four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R_Last_Four_exp[5] = R_Last_Four_expected_prev[5];
	end
	if (
		( R_Last_Four_expected_prev[6] !== 1'bx ) && ( R_Last_Four_prev[6] !== R_Last_Four_expected_prev[6] )
		&& ((R_Last_Four_expected_prev[6] !== last_R_Last_Four_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_Last_Four[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_Last_Four_expected_prev);
		$display ("     Real value = %b", R_Last_Four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R_Last_Four_exp[6] = R_Last_Four_expected_prev[6];
	end
	if (
		( Sign_expected_prev[0] !== 1'bx ) && ( Sign_prev[0] !== Sign_expected_prev[0] )
		&& ((Sign_expected_prev[0] !== last_Sign_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_expected_prev);
		$display ("     Real value = %b", Sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Sign_exp[0] = Sign_expected_prev[0];
	end
	if (
		( Sign_expected_prev[1] !== 1'bx ) && ( Sign_prev[1] !== Sign_expected_prev[1] )
		&& ((Sign_expected_prev[1] !== last_Sign_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_expected_prev);
		$display ("     Real value = %b", Sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Sign_exp[1] = Sign_expected_prev[1];
	end
	if (
		( Sign_expected_prev[2] !== 1'bx ) && ( Sign_prev[2] !== Sign_expected_prev[2] )
		&& ((Sign_expected_prev[2] !== last_Sign_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_expected_prev);
		$display ("     Real value = %b", Sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Sign_exp[2] = Sign_expected_prev[2];
	end
	if (
		( Sign_expected_prev[3] !== 1'bx ) && ( Sign_prev[3] !== Sign_expected_prev[3] )
		&& ((Sign_expected_prev[3] !== last_Sign_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_expected_prev);
		$display ("     Real value = %b", Sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Sign_exp[3] = Sign_expected_prev[3];
	end
	if (
		( Sign_expected_prev[4] !== 1'bx ) && ( Sign_prev[4] !== Sign_expected_prev[4] )
		&& ((Sign_expected_prev[4] !== last_Sign_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_expected_prev);
		$display ("     Real value = %b", Sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Sign_exp[4] = Sign_expected_prev[4];
	end
	if (
		( Sign_expected_prev[5] !== 1'bx ) && ( Sign_prev[5] !== Sign_expected_prev[5] )
		&& ((Sign_expected_prev[5] !== last_Sign_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_expected_prev);
		$display ("     Real value = %b", Sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Sign_exp[5] = Sign_expected_prev[5];
	end
	if (
		( Sign_expected_prev[6] !== 1'bx ) && ( Sign_prev[6] !== Sign_expected_prev[6] )
		&& ((Sign_expected_prev[6] !== last_Sign_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_expected_prev);
		$display ("     Real value = %b", Sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Sign_exp[6] = Sign_expected_prev[6];
	end
	if (
		( student_ID_expected_prev[0] !== 1'bx ) && ( student_ID_prev[0] !== student_ID_expected_prev[0] )
		&& ((student_ID_expected_prev[0] !== last_student_ID_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port student_ID[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", student_ID_expected_prev);
		$display ("     Real value = %b", student_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_student_ID_exp[0] = student_ID_expected_prev[0];
	end
	if (
		( student_ID_expected_prev[1] !== 1'bx ) && ( student_ID_prev[1] !== student_ID_expected_prev[1] )
		&& ((student_ID_expected_prev[1] !== last_student_ID_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port student_ID[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", student_ID_expected_prev);
		$display ("     Real value = %b", student_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_student_ID_exp[1] = student_ID_expected_prev[1];
	end
	if (
		( student_ID_expected_prev[2] !== 1'bx ) && ( student_ID_prev[2] !== student_ID_expected_prev[2] )
		&& ((student_ID_expected_prev[2] !== last_student_ID_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port student_ID[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", student_ID_expected_prev);
		$display ("     Real value = %b", student_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_student_ID_exp[2] = student_ID_expected_prev[2];
	end
	if (
		( student_ID_expected_prev[3] !== 1'bx ) && ( student_ID_prev[3] !== student_ID_expected_prev[3] )
		&& ((student_ID_expected_prev[3] !== last_student_ID_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port student_ID[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", student_ID_expected_prev);
		$display ("     Real value = %b", student_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_student_ID_exp[3] = student_ID_expected_prev[3];
	end
	if (
		( student_ID_expected_prev[4] !== 1'bx ) && ( student_ID_prev[4] !== student_ID_expected_prev[4] )
		&& ((student_ID_expected_prev[4] !== last_student_ID_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port student_ID[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", student_ID_expected_prev);
		$display ("     Real value = %b", student_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_student_ID_exp[4] = student_ID_expected_prev[4];
	end
	if (
		( student_ID_expected_prev[5] !== 1'bx ) && ( student_ID_prev[5] !== student_ID_expected_prev[5] )
		&& ((student_ID_expected_prev[5] !== last_student_ID_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port student_ID[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", student_ID_expected_prev);
		$display ("     Real value = %b", student_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_student_ID_exp[5] = student_ID_expected_prev[5];
	end
	if (
		( student_ID_expected_prev[6] !== 1'bx ) && ( student_ID_prev[6] !== student_ID_expected_prev[6] )
		&& ((student_ID_expected_prev[6] !== last_student_ID_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port student_ID[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", student_ID_expected_prev);
		$display ("     Real value = %b", student_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_student_ID_exp[6] = student_ID_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#160000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module FinalCircuit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg [7:0] B;
reg Clock;
reg data_in;
reg En_Decoder;
reg reset;
reg Reset_A;
reg Reset_B;
// wires                                               
wire [3:0] Current_state;
wire [3:0] R1;
wire [3:0] R2;
wire [0:6] R_First_Four;
wire [0:6] R_Last_Four;
wire [0:6] Sign;
wire [0:6] student_ID;

wire sampler;                             

// assign statements (if any)                          
FinalCircuit i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.Clock(Clock),
	.Current_state(Current_state),
	.data_in(data_in),
	.En_Decoder(En_Decoder),
	.R1(R1),
	.R2(R2),
	.R_First_Four(R_First_Four),
	.R_Last_Four(R_Last_Four),
	.reset(reset),
	.Reset_A(Reset_A),
	.Reset_B(Reset_B),
	.Sign(Sign),
	.student_ID(student_ID)
);
// A[ 7 ]
initial
begin
	A[7] = 1'b1;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b1;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b1;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b1;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b1;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b1;
end 

// Clock
initial
begin
	Clock = 1'b0;
	Clock = #9870 1'b1;
	Clock = #9870 1'b0;
	Clock = #10621 1'b1;
	Clock = #9683 1'b0;
	Clock = #9964 1'b1;
	Clock = #10058 1'b0;
	Clock = #9870 1'b1;
	Clock = #10340 1'b0;
	Clock = #9776 1'b1;
	Clock = #9870 1'b0;
	Clock = #10058 1'b1;
	Clock = #10058 1'b0;
	Clock = #9869 1'b1;
	Clock = #10059 1'b0;
	Clock = #10152 1'b1;
	Clock = #8648 1'b0;
end 

// data_in
initial
begin
	data_in = 1'b0;
	data_in = #188 1'b1;
	data_in = #158766 1'b0;
end 

// En_Decoder
initial
begin
	En_Decoder = 1'b0;
	En_Decoder = #188 1'b1;
	En_Decoder = #158766 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 

// Reset_A
initial
begin
	Reset_A = 1'b0;
	Reset_A = #1316 1'b1;
	Reset_A = #157074 1'b0;
end 

// Reset_B
initial
begin
	Reset_B = 1'b1;
	Reset_B = #158390 1'b0;
end 

FinalCircuit_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.Clock(Clock),
	.data_in(data_in),
	.En_Decoder(En_Decoder),
	.reset(reset),
	.Reset_A(Reset_A),
	.Reset_B(Reset_B),
	.sampler_tx(sampler)
);

FinalCircuit_vlg_check_tst tb_out(
	.Current_state(Current_state),
	.R1(R1),
	.R2(R2),
	.R_First_Four(R_First_Four),
	.R_Last_Four(R_Last_Four),
	.Sign(Sign),
	.student_ID(student_ID),
	.sampler_rx(sampler)
);
endmodule

